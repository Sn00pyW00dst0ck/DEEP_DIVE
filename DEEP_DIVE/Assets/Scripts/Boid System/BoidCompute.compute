// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
static const int threadGroupSize = 1024;

// A structure definition representing the Boid Data passed in to the shader
struct Boid  {
    float3 position;
    float3 direction;

    float3 flockHeading;
    float3 flockCentre;
    float3 avoidanceHeading;
    int numFlockmates;
};

// Here are inputs to the shader
RWStructuredBuffer<Boid> boids; 
int numBoids;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Compares the square distance between a boid and every other boid
    for (int i = 0; i < numBoids; i++) {
        if (id.x == i) { continue; }

        Boid otherBoid = boids[i];
        float3 offset = otherBoid.position - boids[id.x].position;
        float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

        // If visible by current boid then consider it part of the 'flock'
        if (sqrDst < (viewRadius * viewRadius)) {
            boids[id.x].numFlockmates += 1;
            boids[id.x].flockHeading += otherBoid.direction;
            boids[id.x].flockCentre += otherBoid.position;

            // If too close then try to avoid hitting it
            if (sqrDst < avoidRadius * avoidRadius) {
                boids[id.x].avoidanceHeading -= offset / sqrDst;
            }
        }
    }

}
